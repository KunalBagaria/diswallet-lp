import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as Yup from 'yup';

export const PasswordSection = function PasswordSectionComponent() {
  const validationSchema = Yup.object().shape({
    password: Yup.string()
      .required('Password is required')
      .min(6, 'Password must be at least 6 characters'),
    confirmPassword: Yup.string()
      .required('Confirm Password is required')
      .oneOf([Yup.ref('password')], 'Passwords must match'),
  });
  const formOptions = { resolver: yupResolver(validationSchema) };

  const {
    register, handleSubmit, formState: { errors },
  } = useForm(formOptions);

  const onSubmit = (data: any) => console.log(JSON.stringify(data));

  return (
    <div className="pl-10 mt-14 mb-16 w-full">
      <div className="text-4xl text-white font-bold">
        Setup a Wallet Password
      </div>
      {/* "handleSubmit" will validate your inputs before invoking "onSubmit" */}
      <form className="flex flex-col" onSubmit={handleSubmit(onSubmit)}>
        <motion.input
          type="password"
          className={`mt-14 mr-14 p-10 text-2xl h-20  bg-input-dark rounded-xl text-input-dark-text ${errors?.password ? 'border border-input-error' : ''}`}
          placeholder="Enter Password"
          {...register(
            'password',
            { required: true },
          )}
          required
        />
        {errors.password && <p className="mt-4 text-2xl text-input-error ">{errors.password?.message}</p> }

        <motion.input
          type="password"
          className={`mt-8 mr-14 p-10 text-2xl h-20 bg-input-dark rounded-xl text-input-dark-text ${errors?.confirmPassword ? 'border border-input-error' : ''}`}
          placeholder="Confirm Password"
          {...register(
            'confirmPassword',
            { required: true },
          )}
          required
        />
        {errors.confirmPassword && <p className="mt-4 text-2xl text-input-error">{errors.confirmPassword?.message}</p> }

        <button className={`mt-24 mr-14 text-2xl h-20 rounded-xl text-white ${errors.confirmPassword || errors.password ? 'bg-button-disabled' : 'bg-button'}`} type="submit"> Continue </button>
      </form>
    </div>
  );
};

export const SeedPhraseSection = function SeedPhraseSectionComponent() {
  const [isChecked, setChecked] = useState(true);

  const qnas = [{
    ques: 'What is a Seed Phrase?',
    ans: 'A seed phrase is a series of 12-words generated by DisWallet that would act as the “master key” to your wallet and your funds.',
  }, {
    ques: 'What is the difference between your password and seed phrase?',
    ans: 'All things shorts, Seed phrase is more important than your password. Your password only provides you quick access to your wallet but you will need your seed phrase to do the very first login on any of your device.',
  }, {
    ques: 'What if I lose my Seed Phrase?',
    ans: 'As painful as it sounds, you will basically lose access to all your funds. So you need to keep your seed phrase backed-up and secured. Here are some of the ways to do so:',
  }];

  const handleOnchange = () => {
    setChecked(!isChecked);
  };

  return (
    <div className="flex flex-col pl-10 pr-12 mt-14 mb-16 w-full border-2 border-red-400">
      <div className="text-5xl text-white font-bold">
        Setting up your Seed Phrase
      </div>

      <div className="flex flex-col justify-between">
        {qnas.map((e, i) => (
          <div className="mt-4" key={i}>
            <div className="text-2xl text-white mt-6">
              {e.ques}
            </div>
            <div className="text-2xl mt-4 text-bluish-dark">
              {e.ans}
            </div>
          </div>
        ))}
      </div>

      <div className="flex flex-row  mt-12">
        <input
          type="checkbox"
          onChange={handleOnchange}
          checked={isChecked}
          name="agree"
        />
        <div className="text-white text-2xl ml-8">I have carefully read the above information and understood it completely.</div>
      </div>

      <button className={`mt-12 text-2xl h-20 rounded-xl text-white ${!isChecked ? 'bg-button-disabled' : 'bg-button'}`} type="submit"> Yes, I have understood everything </button>
    </div>
  );
};

export const SetupLayout = function SeedPhraseInfoComponent() {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [currentStep, setCurrentStep] = useState(2);

  const totalSteps = 5;

  return (
    <div className="container mx-auto place-content-center flex justify-center mt-36 border-4 border-indigo-600">
      <div className=" flex flex-col m-20 w-2/6 border-4 border-indigo-600 bg-card-background-dark rounded-md">
        <div className="ml-10 mr-10 mt-10">
          <div className="w-full bg-progress-empty rounded-md">
            <div className=" bg-progress-green h-3 rounded-md" style={{ width: `${(currentStep / totalSteps) * 100}%` }} />
          </div>
        </div>
        <div className="ml-10 mr-10 mt-8 text-2xl text-bluish-dark">
          Step
          {' '}
          {currentStep}
          /
          {totalSteps}
        </div>

        {currentStep === 1 && <PasswordSection />}
        {currentStep === 2 && <SeedPhraseSection />}
      </div>

    </div>
  );
};
