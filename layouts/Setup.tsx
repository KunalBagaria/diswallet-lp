import * as Yup from 'yup';
import React, {
  useEffect,
  useState,
} from 'react';
import { useRouter } from 'next/router';
import useWindowSize from 'react-use/lib/useWindowSize';
import { encrypt } from '@/components/crypto';
import { shuffleArray } from '@/components/functions';
import { motion } from 'framer-motion';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { generateKeyPair } from '@/components/wallet';
import Confetti from 'react-confetti';
import stepsIcon from '@/images/icons/steps.svg';
import Img from 'next/image';
import partyEmoji from '@/images/party-emoji.png';
import downloadIcon from '@/images/download-icon.svg';
import components from '@/styles/Components.module.scss';
import { getServerURL } from '@/components/getServerURL';
import { toasterPromise } from '@/components/toasterNetworkPromise';
import toast from 'react-hot-toast';

// step 1
export const PasswordSection = function PasswordSectionComponent({
  setPassword,
  setStep,
}: any) {
  const validationSchema = Yup.object().shape({
    password: Yup.string()
      .required('Password is required')
      .min(6, 'Password must be at least 6 characters'),
    confirmPassword: Yup.string()
      .required('Confirm Password is required')
      .oneOf([Yup.ref('password')], 'Passwords must match'),
  });
  const formOptions = { resolver: yupResolver(validationSchema) };
  const [submit, setSubmit] = useState(false);

  const {
    register, handleSubmit, watch, formState: { errors },
  } = useForm(formOptions);
  const password = watch('password');

  useEffect(() => {
    if (password) {
      setSubmit(true);
    }
  }, [password]);

  const onSubmit = (data: any) => {
    console.log(JSON.stringify(data));
    setPassword(data.password);
    setStep(2);
  };

  return (
    <div className="pl-10 mt-14 mb-16 w-full">
      <div className="text-5xl text-white font-bold">
        Setup a Wallet Password
      </div>
      {/* "handleSubmit" will validate your inputs before invoking "onSubmit" */}
      <form className="flex flex-col" onSubmit={handleSubmit(onSubmit)}>
        <motion.input
          type="password"
          className={`mt-14 mr-14 p-10 text-2xl h-24 bg-input-dark rounded-xl text-input-dark-text ${errors?.password ? 'border border-input-error' : ''}`}
          placeholder="Enter Password"
          autoComplete="new-password"
          {...register(
            'password',
            { required: true },
          )}
          required
        />
        {errors.password && <p className="mt-4 text-2xl text-input-error ">{errors.password?.message}</p> }

        <motion.input
          type="password"
          className={`mt-8 mr-14 p-10 text-2xl h-24 bg-input-dark rounded-xl text-input-dark-text ${errors?.confirmPassword ? 'border border-input-error' : ''}`}
          placeholder="Confirm Password"
          autoComplete="new-password"
          {...register(
            'confirmPassword',
            { required: true },
          )}
          required
        />
        {errors.confirmPassword && <p className="mt-4 text-2xl text-input-error">{errors.confirmPassword?.message}</p> }

        <button
          className={`
            mt-12 mr-14 text-2xl h-24 rounded-xl text-white ${errors.confirmPassword || errors.password || !submit ? 'bg-button-disabled' : 'bg-button'}
          `}
          type={errors.confirmPassword || errors.password || !submit ? 'reset' : 'submit'}
          style={{ cursor: errors.confirmPassword || errors.password || !submit ? 'not-allowed' : 'pointer' }}
        >
          Continue
        </button>
      </form>
    </div>
  );
};

// step 2
export const SeedPhraseSection = function SeedPhraseSectionComponent({
  setStep,
}: any) {
  const [isChecked, setChecked] = useState(true);

  const qnas = [{
    ques: 'What is a Seed Phrase?',
    ans: 'A seed phrase is a series of 12-words generated by DisWallet that would act as the “master key” to your wallet and your funds.',
  }, {
    ques: 'What is the difference between your password and seed phrase?',
    ans: 'All things shorts, Seed phrase is more important than your password. Your password only provides you quick access to your wallet but you will need your seed phrase to do the very first login on any of your device.',
  }, {
    ques: 'What if I lose my Seed Phrase?',
    ans: 'As painful as it sounds, you will basically lose access to all your funds. So you need to keep your seed phrase backed-up and secured. Here are some of the ways to do so:',
  }];

  const handleOnchange = () => {
    setChecked(!isChecked);
  };

  return (
    <div className="flex flex-col pl-10 pr-12 mt-14 mb-16 w-full">
      <div className="text-5xl text-white font-bold">
        Setting up your Seed Phrase
      </div>

      <div className="flex flex-col justify-between">
        {qnas.map((e, i) => (
          <div className="mt-4" key={i}>
            <div className="text-2xl text-white mt-6">
              {e.ques}
            </div>
            <div className="text-2xl mt-4 text-bluish-dark">
              {e.ans}
            </div>
          </div>
        ))}
      </div>

      <div className="flex flex-row  mt-12">
        <input
          type="checkbox"
          onChange={handleOnchange}
          checked={isChecked}
          name="agree"
        />
        <div className="text-white text-2xl ml-8">I have carefully read the above information and understood it completely.</div>
      </div>

      <button
        className={`mt-12 text-2xl h-20 rounded-xl text-white ${!isChecked ? 'bg-button-disabled' : 'bg-button'}`}
        type="submit"
        onClick={() => {
          if (isChecked) {
            setStep(3);
          }
        }}
      >
        Yes, I have understood everything
      </button>
    </div>
  );
};

// step 3
export const GetSeedPhrase = function GetSeedPhaseComponent({
  setStep,
  setParentKeys,
}: any) {
  const [seedNotVisible, setSeedVisible] = useState(true);
  const [keys, setKeys] = useState<any>();

  const toggleSeedVisible = () => {
    setSeedVisible(!seedNotVisible);
  };

  useEffect(() => {
    const gKeys = generateKeyPair();
    setKeys(gKeys);
    setParentKeys(gKeys);
  }, [setParentKeys]);

  const downloadTxtFile = () => {
    const element = document.createElement('a');
    const file = new Blob([keys.generatedMnemonic], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${keys.publicKey}_PRIVATE_KEY.txt`;
    document.body.appendChild(element); // Required for this to work in FireFox
    element.click();
  };

  return (
    <div>
      <div className="flex flex-col pl-10 mt-14 mb-16 mr-10 w-full">
        <div className="text-6xl text-white font-bold">
          Get your Secret Seed Phrase
        </div>
        <div className="mt-10 mr-10 text-3xl md:text-2xl text-bluish-dark font-light">
          This Seed Phrase will be your master access to your wallet funds.
        </div>
        <div className="mt-10 mr-10 text-3xl md:text-2xl text-bluish-dark font-light">
          <div
            className="flex flex-row mb-10 mr-10"
            style={{ position: 'relative' }}
          >
            <img
              src={stepsIcon.src}
              alt=""
              style={{
                position: 'absolute',
                left: 0,
              }}
            />
            <div className="ml-24 text-white">
              You shall never disclose your secret recovery phrase. You
              could lose your funds if you lose this key.
            </div>
          </div>
          <div className="flex flex-col mb-20 mr-14">
            <div
              className={`bg-white ml-24 text-2xl md:text-3xl text-black font-mono font-bold p-6 md:p-20 ${seedNotVisible ? 'blur-sm' : 'blur-none'}`}
              onClick={toggleSeedVisible}
              style={{ borderRadius: '0.9rem' }}
            >
              {keys ? keys.generatedMnemonic : ''}
            </div>

            {!seedNotVisible && (
              <div
                className={`bg-seed-active-green ml-24 mt-12 text-2xl md:text-2xl text-white p-6 md:p-10 ${seedNotVisible ? '' : ''}`}
                style={{ border: '1px solid #5CB860', borderRadius: '0.9rem' }}
              >
                Write down this secret phase in this same sequence, memorize it or save it
                on a password manager like 1Password, LastPass or Bitwarden.
                You can also download this phrase as a text file
                and save it in an encrypted storage for maximum security.

                <div
                  className="flex flex-row mt-10"
                  onClick={downloadTxtFile}
                  style={{ cursor: 'pointer' }}
                >
                  <a className="font-bold underline">
                    Download and Save Secret Phrase
                  </a>
                  <div
                    style={{ marginLeft: '0.5rem' }}
                  >
                    <Img src={downloadIcon} className="ml-14" />
                  </div>
                </div>
              </div>
            )}

          </div>

        </div>
        <button
          className="mr-12 text-2xl h-20 rounded-xl text-white bg-button"
          type="submit"
          onClick={() => setStep(4)}
        >
          Continue
        </button>

      </div>
    </div>
  );
};

interface Keys {
  publicKey: string;
  privateKey: string;
  generatedMnemonic: string;
}

// step 4
export const Verification = function VerificationComponent({
  keys,
  password,
  setParentStep,
  id,
}: {
  keys: Keys;
  password: string;
  setParentStep: any;
  id: string | string[] | undefined;
}) {
  const [words, setWords] = useState<string[]>([]);
  const [activeWords, setActiveWords] = useState<string[]>([]);
  const [disabled, setDisabled] = useState<boolean>(false);

  useEffect(() => {
    console.log(id);
    const eightWords = keys.generatedMnemonic.split(' ').slice(0, 8);
    const shuffledWords = shuffleArray(eightWords);
    setWords(shuffledWords);
  }, [keys.generatedMnemonic, id]);

  const handleSubmit = async () => {
    if (activeWords.length !== 4) return;
    setDisabled(true);
    const encryptedPrivateKey = await encrypt(Buffer.from(password), Buffer.from(keys.privateKey));
    const data = {
      publicKey: keys.publicKey,
      encryptedPrivateKey,
      _id: id,
    };
    try {
      const request = fetch(`${getServerURL()}/api/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      toast.promise(toasterPromise(request), {
        loading: 'Saving wallet...',
        success: 'Successfully saved wallet',
        error: 'Failed to save wallet',
      });

      const response = await request;
      if (response.ok) {
        setParentStep(5);
      }
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <div>
      <div className="flex flex-col pl-10 mt-14 mb-16 mr-10 w-full">
        <div className="text-6xl text-white font-bold">
          Verification
        </div>
        <div className="mt-10 mr-10 text-3xl md:text-2xl text-bluish-dark font-light">
          Select the words which were there in your seed phrase (in any sequence)
        </div>
        <div>
          <div className="grid gap-6 md:gap-4 grid-cols-2 md:grid-cols-4 mt-10 -mb-24 md:mb-0 grid-rows-6 md:grid-rows-2 mr-10 text-white font-light">
            {words.map((e, i) => (
              <motion.div
                key={i}
                className={`flex text-2xl pt-2 justify-center items-center h-16 rounded-lg font-bold font-mono ${activeWords.includes(e) ? 'bg-button' : 'bg-grid-inactive border-2 border-button hover:bg-button'}`}
                whileHover={{ scale: 1.025 }}
                onClick={() => {
                  if (!activeWords.includes(e) && activeWords.length !== 4) {
                    setActiveWords([...activeWords, e]);
                  } else if (activeWords.includes(e)) {
                    setActiveWords(activeWords.filter((w) => w !== e));
                  }
                }}
              >
                {e}
              </motion.div>
            ))}
          </div>
        </div>

        <button
          className={`mt-2 md:mt-10 text-2xl h-20 mr-12 rounded-xl text-white font-semibold ${activeWords.length === 4 || disabled ? 'bg-button' : 'bg-button-disabled'}`}
          type="submit"
          style={{ cursor: activeWords.length === 4 || disabled ? 'pointer' : 'not-allowed' }}
          onClick={handleSubmit}
        >
          Continue
        </button>
      </div>
    </div>
  );
};

// step 5
export const Congratulation = function CongratulationComponent() {
  const { width, height } = useWindowSize();
  const [wind, setWind] = useState(0.025);

  useEffect(() => {
    setInterval(() => {
      setWind(Math.floor(Math.random() * 0.07));
    }, 2000);
  }, []);

  return (
    <div>
      <Confetti
        width={width - 50}
        height={height - 50}
        wind={wind}
      />
      <div className="flex flex-col pl-10 mt-14 mb-16 w-full">
        <div className="text-5xl text-center text-white font-bold">
          Congratulations
        </div>
        <div className="flex items-center justify-center mt-12">
          <Img className="partyEmoji" height={120} width={120} src={partyEmoji} alt="party emoji" placeholder="blur" />
        </div>
        <div className="flex items-center text-center justify-center mt-10 text-4xl text-white font-light">
          You have successfully setup DisWallet
        </div>
        <div className="flex items-center text-center justify-center mt-10 text-2xl text-bluish-dark font-light">
          You can now go back to Discord and continue using DisWallet
        </div>
        <button
          className="mt-10 text-2xl h-24 mr-12 rounded-xl text-white font-semibold bg-button"
          type="submit"
          onClick={() => {
            window.open('https://discord.com', '_blank');
          }}
        >
          Continue to Discord
        </button>
      </div>
    </div>
  );
};

export const SetupLayout = function SeedPhraseInfoComponent() {
  const [currentStep, setCurrentStep] = useState(1);
  const [password, setPassword] = useState<string>('');
  const [keys, setKeys] = useState<any>();
  const totalSteps = 5;
  const router = useRouter();
  const { id } = router.query;

  return (
    <div
      className={`container mx-auto place-content-center flex justify-center mt-24 ${components.fancyFont}`}
    >
      <div
        style={{ maxWidth: '62.5rem', width: '100%' }}
        className="flex flex-col md:m-14 w-11/12 md:2/12 bg-card-background-dark rounded-xl"
      >
        <div className="ml-10 mr-10 mt-10">
          <div className="w-full bg-progress-empty rounded-md">
            <div
              className=" bg-progress-green h-3 rounded-md"
              style={{
                width: `${(currentStep / totalSteps) * 100}%`,
                transition: 'width 0.5s ease-in-out',
              }}
            />
          </div>
        </div>
        {currentStep !== 5 && (
        <div className="ml-10 mr-10 mt-8 text-2xl text-bluish-dark">
          Step
          {' '}
          {currentStep}
          /
          {totalSteps}
        </div>
        )}

        {currentStep === 1 && (
          <PasswordSection
            setPassword={setPassword}
            setStep={setCurrentStep}
          />
        )}
        {currentStep === 2 && (
          <SeedPhraseSection
            setStep={setCurrentStep}
          />
        )}
        {currentStep === 3 && (
          <GetSeedPhrase
            setStep={setCurrentStep}
            setParentKeys={setKeys}
          />
        )}
        {currentStep === 4 && (
          <Verification
            keys={keys}
            password={password}
            setParentStep={setCurrentStep}
            id={id}
          />
        )}
        {currentStep === 5 && (
          <Congratulation />
        )}
      </div>

    </div>
  );
};
